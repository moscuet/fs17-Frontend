import React, { useState } from "react";
import {
  Box,
  Typography,
  TextField,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  IconButton,
} from "@mui/material";
import { useFormik } from "formik";
import * as Yup from "yup";
import { useAppDispatch, useAppSelector } from "../../app/hooks";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import { colorsActions } from "./productColorSlice";
import { ColorReadDto } from "./colorDto";

// Component
const EditColor = () => {
  const dispatch = useAppDispatch();
  const colors = useAppSelector((state) => state.colors.items);
  const [editMode, setEditMode] = useState<string | null>(null);
  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);

  const colorValidationSchema = Yup.object({
    value: Yup.string()
      .required("Color name is required")
      .test(
        "unique-color",
        "This color already exists",
        (value) =>
          !colors.some(
            (color) =>
              color.value.toLowerCase() === value?.toLowerCase()
          )
      ),
  });

  const formik = useFormik({
    initialValues: {
      value: "",
    },
    validationSchema: colorValidationSchema,
    onSubmit: (values) => {
        if (editMode) {
          dispatch(
            colorsActions.updateOne({ id: editMode, updateDto: values })
          );
          setEditMode(null);
        }
      },
      enableReinitialize: true,
  });

  const handleEdit = (color: ColorReadDto) => {
    formik.setValues({
      value: color.value,
    });
    setEditMode(color.id);
  };

  const handleDelete = (colorId: string) => {
    setOpenDeleteDialog(true);
    setEditMode(colorId);
  };

  const handleConfirmDelete = async () => {
    if (editMode) {
      await dispatch(colorsActions.deleteOne(editMode));
      setOpenDeleteDialog(false);
      setEditMode(null);
    }
  };

  const handleCancel = () => {
    setOpenDeleteDialog(false);
  };

  return (
    <Box>
      {colors.map((color: ColorReadDto) => (
        <Box
          key={color.id}
          sx={{
            mb: 2,
            p: 2,
            border: "1px solid grey",
            borderRadius: "4px",
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          {editMode === color.id ? (
            <form onSubmit={formik.handleSubmit}>
              <TextField
                fullWidth
                margin="normal"
                id="value"
                name="value"
                label="Color Name"
                value={formik.values.value}
                onChange={formik.handleChange}
                error={formik.touched.value && Boolean(formik.errors.value)}
                helperText={formik.touched.value && formik.errors.value}
              />

              <Button
                color="primary"
                variant="contained"
                type="submit"
                sx={{ mt: 2 }}
              >
                Save Color
              </Button>
            </form>
          ) : (
            <>
              <Typography>
                {`${color.id.slice(0, 8)} - ${color.value}`}
              </Typography>
              <Box>
                <IconButton
                  onClick={() => handleEdit(color)}
                  color="secondary"
                >
                  <EditIcon />
                </IconButton>
                <IconButton
                  onClick={() => handleDelete(color.id)}
                  color="error"
                >
                  <DeleteIcon />
                </IconButton>
              </Box>
            </>
          )}
        </Box>
      ))}

      <Dialog open={openDeleteDialog} onClose={handleCancel}>
        <DialogTitle>Confirm Delete</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Are you sure you want to delete this color? This action cannot be
            undone.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCancel}>Cancel</Button>
          <Button onClick={handleConfirmDelete} color="error">
            Delete
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default EditColor;
